/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Messaging API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateThreadBody,
  ListMessages200,
  ListMessagesParams,
  Login200,
  LoginBody,
  Message,
  SendMessageBody,
  ThreadId,
  ThreadSummary,
  User
} from './api.schemas';

import { customInstance } from './api.instance';




export const login = (
    loginBody: LoginBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Login200>(
      {url: `/api/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginBody, signal
    },
      );
    }
  


export const getLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginBody}, TContext> => {

const mutationKey = ['login'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof login>>, {data: LoginBody}> = (props) => {
          const {data} = props ?? {};

          return  login(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LoginMutationResult = NonNullable<Awaited<ReturnType<typeof login>>>
    export type LoginMutationBody = LoginBody
    export type LoginMutationError = unknown

    export const useLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof login>>, TError,{data: LoginBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof login>>,
        TError,
        {data: LoginBody},
        TContext
      > => {

      const mutationOptions = getLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const getMe = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<User>(
      {url: `/api/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetMeQueryKey = () => {
    return [`/api/me`] as const;
    }

    
export const getGetMeQueryOptions = <TData = Awaited<ReturnType<typeof getMe>>, TError = null>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMe>>> = ({ signal }) => getMe(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMeQueryResult = NonNullable<Awaited<ReturnType<typeof getMe>>>
export type GetMeQueryError = null


export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = null>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          Awaited<ReturnType<typeof getMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMe>>,
          TError,
          Awaited<ReturnType<typeof getMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMe<TData = Awaited<ReturnType<typeof getMe>>, TError = null>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMe>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const listThreads = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<ThreadSummary[]>(
      {url: `/api/threads`, method: 'GET', signal
    },
      );
    }
  

export const getListThreadsQueryKey = () => {
    return [`/api/threads`] as const;
    }

    
export const getListThreadsQueryOptions = <TData = Awaited<ReturnType<typeof listThreads>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListThreadsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listThreads>>> = ({ signal }) => listThreads(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListThreadsQueryResult = NonNullable<Awaited<ReturnType<typeof listThreads>>>
export type ListThreadsQueryError = unknown


export function useListThreads<TData = Awaited<ReturnType<typeof listThreads>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listThreads>>,
          TError,
          Awaited<ReturnType<typeof listThreads>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListThreads<TData = Awaited<ReturnType<typeof listThreads>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listThreads>>,
          TError,
          Awaited<ReturnType<typeof listThreads>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListThreads<TData = Awaited<ReturnType<typeof listThreads>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListThreads<TData = Awaited<ReturnType<typeof listThreads>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listThreads>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListThreadsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const createThread = (
    createThreadBody: CreateThreadBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ThreadId>(
      {url: `/api/threads`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createThreadBody, signal
    },
      );
    }
  


export const getCreateThreadMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createThread>>, TError,{data: CreateThreadBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createThread>>, TError,{data: CreateThreadBody}, TContext> => {

const mutationKey = ['createThread'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createThread>>, {data: CreateThreadBody}> = (props) => {
          const {data} = props ?? {};

          return  createThread(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateThreadMutationResult = NonNullable<Awaited<ReturnType<typeof createThread>>>
    export type CreateThreadMutationBody = CreateThreadBody
    export type CreateThreadMutationError = unknown

    export const useCreateThread = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createThread>>, TError,{data: CreateThreadBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createThread>>,
        TError,
        {data: CreateThreadBody},
        TContext
      > => {

      const mutationOptions = getCreateThreadMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const listMessages = (
    threadId: number,
    params?: ListMessagesParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<ListMessages200>(
      {url: `/api/threads/${threadId}/messages`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getListMessagesQueryKey = (threadId?: number,
    params?: ListMessagesParams,) => {
    return [`/api/threads/${threadId}/messages`, ...(params ? [params]: [])] as const;
    }

    
export const getListMessagesQueryOptions = <TData = Awaited<ReturnType<typeof listMessages>>, TError = unknown>(threadId: number,
    params?: ListMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListMessagesQueryKey(threadId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listMessages>>> = ({ signal }) => listMessages(threadId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(threadId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ListMessagesQueryResult = NonNullable<Awaited<ReturnType<typeof listMessages>>>
export type ListMessagesQueryError = unknown


export function useListMessages<TData = Awaited<ReturnType<typeof listMessages>>, TError = unknown>(
 threadId: number,
    params: undefined |  ListMessagesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMessages>>,
          TError,
          Awaited<ReturnType<typeof listMessages>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListMessages<TData = Awaited<ReturnType<typeof listMessages>>, TError = unknown>(
 threadId: number,
    params?: ListMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMessages>>,
          TError,
          Awaited<ReturnType<typeof listMessages>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useListMessages<TData = Awaited<ReturnType<typeof listMessages>>, TError = unknown>(
 threadId: number,
    params?: ListMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useListMessages<TData = Awaited<ReturnType<typeof listMessages>>, TError = unknown>(
 threadId: number,
    params?: ListMessagesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listMessages>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getListMessagesQueryOptions(threadId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const sendMessage = (
    threadId: number,
    sendMessageBody: SendMessageBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Message>(
      {url: `/api/threads/${threadId}/messages`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: sendMessageBody, signal
    },
      );
    }
  


export const getSendMessageMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendMessage>>, TError,{threadId: number;data: SendMessageBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof sendMessage>>, TError,{threadId: number;data: SendMessageBody}, TContext> => {

const mutationKey = ['sendMessage'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendMessage>>, {threadId: number;data: SendMessageBody}> = (props) => {
          const {threadId,data} = props ?? {};

          return  sendMessage(threadId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendMessageMutationResult = NonNullable<Awaited<ReturnType<typeof sendMessage>>>
    export type SendMessageMutationBody = SendMessageBody
    export type SendMessageMutationError = unknown

    export const useSendMessage = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendMessage>>, TError,{threadId: number;data: SendMessageBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sendMessage>>,
        TError,
        {threadId: number;data: SendMessageBody},
        TContext
      > => {

      const mutationOptions = getSendMessageMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
